{
  "name": "example-runner",
  "version": "0.2.0",
  "description": "Runner for example files, usually tests.",
  "main": "lib/index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/runner.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/square/example-runner"
  },
  "keywords": [
    "example",
    "test"
  ],
  "author": {
    "name": "Square, Inc."
  },
  "license": "Apache 2",
  "bugs": {
    "url": "https://github.com/square/example-runner/issues"
  },
  "homepage": "https://github.com/square/example-runner",
  "devDependencies": {},
  "readme": "# example-runner\n\nRun example files with assertions. example-runner can be used as a very basic\ntest runner, optionally with a source transform function. This makes it\nsuitable for testing JavaScript-to-JavaScript compilers such as\n[es6-class][es6-class], where it is used.\n\n## Install\n\n```\n$ npm install [--save-dev] example-runner\n```\n\n## Usage\n\nexample-runner has two exported functions: `run` and `runCLI`. Most of the time\nyou'll probably want to use `runCLI` which prints to stdout and exits with the\nappropriate status code. If you need to customize the output or exit behavior\nof example-runner, such as to fit it into another tool, you can use `run`.\n\n### runCLI(files, options)\n\nWith no arguments, `runCLI` will run `test/examples/*.js`.\n\n```js\nrequire('example-runner').runCLI();\n```\n\nYou can run specific files if you want:\n\n```js\nrequire('example-runner').runCLI(['a.js', 'b.js']);\n```\n\nProvide the `transform` option if you want to modify your examples before\nrunning, such as with [sweet.js][sweet.js]:\n\n```js\nrequire('example-runner').runCLI({\n  transform: function(source, testName, filename, options) {\n    return sweetjs.compile(source);\n  }\n});\n```\n\nThe arguments given to `transform` are:\n\n* **source**: A string with the source of the example file.\n* **testName**: The base name of the example file, sans `.js` suffix.\n* **filename**: The path to the example file.\n* **options**: Options parsed from comments in the source of the example file.\n  This is useful if how you transform the source is different per file and you\n  need a way to configure it. For example, `/* config a:b, log:true */` in the\n  source file will create options like so: `{ config: { a: \"b\", log: true } }`.\n\nIf you need to pass data to your example files, use the `context` option.\n\n```js\nrequire('example-runner').runCLI({\n  context: { mydata: [1, 2], mylib: require('mylib') }\n});\n```\n\n Note that there are some default context properties:\n\n* **assert**: This is the node assert library. At least one assertion must be\n  made for an example file to be considered successful. You can disable this\n  behavior by adding `/* example-runner assert:false */` at the top of your\n  example file.\n* **__options**: This is the same options object passed to `transform` (see\n  above).\n\n### run(files, options)\n\nLike `runCLI()`, `run()` takes files and options. Unlike `runCLI()` it returns\nan `EventEmitter` that emits three events:\n\n* `pass(testName)`: called when an example file passes\n* `fail(testName, error)`: called when an example file fails, along with the\n  error thrown\n* `done(passed, failed)`: called when all tests have run, along with the\n  names of the passed and failed examples\n\n[es6-class]: https://github.com/square/es6-class\n[sweet.js]: http://sweetjs.org/\n",
  "readmeFilename": "README.md",
  "_id": "example-runner@0.2.0",
  "_from": "example-runner@~0.2.0"
}
