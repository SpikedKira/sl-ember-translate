{"version":3,"sources":["dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/sl-translate.jshint.js","dummy/Ember CLI QUnit/tests/ember-cli-qunit/initializers/translate-service.jshint.js","dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/sl-get-translation.jshint.js","dummy/Ember CLI QUnit/tests/ember-cli-qunit/services/translate.jshint.js","dummy/app.js","dummy/components/sl-translate.js","dummy/controllers/demo.js","dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/components/sl-translate.jshint.js","dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/initializers/translate-service.jshint.js","dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/mixins/sl-get-translation.jshint.js","dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/services/translate.jshint.js","dummy/ember-cli-esnext/tests/ember-cli-esnext/components/sl-translate.jshint.js","dummy/ember-cli-esnext/tests/ember-cli-esnext/initializers/translate-service.jshint.js","dummy/ember-cli-esnext/tests/ember-cli-esnext/mixins/sl-get-translation.jshint.js","dummy/ember-cli-esnext/tests/ember-cli-esnext/services/translate.jshint.js","dummy/ember-data/tests/ember-data/components/sl-translate.jshint.js","dummy/ember-data/tests/ember-data/initializers/translate-service.jshint.js","dummy/ember-data/tests/ember-data/mixins/sl-get-translation.jshint.js","dummy/ember-data/tests/ember-data/services/translate.jshint.js","dummy/ember-export-application-global/tests/ember-export-application-global/components/sl-translate.jshint.js","dummy/ember-export-application-global/tests/ember-export-application-global/initializers/translate-service.jshint.js","dummy/ember-export-application-global/tests/ember-export-application-global/mixins/sl-get-translation.jshint.js","dummy/ember-export-application-global/tests/ember-export-application-global/services/translate.jshint.js","dummy/initializers/export-application-global.js","dummy/initializers/translate-service.js","dummy/live-reload-middleware/tests/live-reload-middleware/components/sl-translate.jshint.js","dummy/live-reload-middleware/tests/live-reload-middleware/initializers/translate-service.jshint.js","dummy/live-reload-middleware/tests/live-reload-middleware/mixins/sl-get-translation.jshint.js","dummy/live-reload-middleware/tests/live-reload-middleware/services/translate.jshint.js","dummy/router.js","dummy/routes/demo.js","dummy/sl-ember-translate/tests/sl-ember-translate/components/sl-translate.jshint.js","dummy/sl-ember-translate/tests/sl-ember-translate/initializers/translate-service.jshint.js","dummy/sl-ember-translate/tests/sl-ember-translate/mixins/sl-get-translation.jshint.js","dummy/sl-ember-translate/tests/sl-ember-translate/services/translate.jshint.js","dummy/templates/application.js","dummy/templates/demo.js","dummy/templates/index.js","dummy/tests/app.jshint.js","dummy/tests/controllers/demo.jshint.js","dummy/tests/dummy/tests/helpers/resolver.jshint.js","dummy/tests/dummy/tests/helpers/start-app.jshint.js","dummy/tests/dummy/tests/test-helper.jshint.js","dummy/tests/dummy/tests/unit/components/sl-translate-test.jshint.js","dummy/tests/dummy/tests/unit/initializers/translate-service-test.jshint.js","dummy/tests/dummy/tests/unit/mixins/sl-get-translation-test.jshint.js","dummy/tests/dummy/tests/unit/services/translate-test.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/router.jshint.js","dummy/tests/routes/demo.jshint.js","dummy/tests/test-helper.js","dummy/tests/unit/components/sl-translate-test.js","dummy/tests/unit/initializers/translate-service-test.js","dummy/tests/unit/mixins/sl-get-translation-test.js","dummy/tests/unit/services/translate-test.js","vendor/ember-cli/app-suffix.js"],"sourcesContent":["define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-qunit/components');\n    test('ember-cli-qunit/components/sl-translate.js should pass jshint', function() { \n      ok(true, 'ember-cli-qunit/components/sl-translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-qunit/initializers');\n    test('ember-cli-qunit/initializers/translate-service.js should pass jshint', function() { \n      ok(true, 'ember-cli-qunit/initializers/translate-service.js should pass jshint.'); \n    });\n  });","define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-qunit/mixins');\n    test('ember-cli-qunit/mixins/sl-get-translation.js should pass jshint', function() { \n      ok(true, 'ember-cli-qunit/mixins/sl-get-translation.js should pass jshint.'); \n    });\n  });","define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-qunit/services');\n    test('ember-cli-qunit/services/translate.js should pass jshint', function() { \n      ok(true, 'ember-cli-qunit/services/translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });","define(\"dummy/components/sl-translate\", \n  [\"sl-ember-translate/components/sl-translate\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var component = __dependency1__[\"default\"];\n\n    /** @module initializers/translate-service */\n    __exports__[\"default\"] = component;\n  });","define(\"dummy/controllers/demo\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n        valueToDisplay: 'Unicorn'\n    });\n  });","define(\"dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-es5-shim/components');\n    test('ember-cli-es5-shim/components/sl-translate.js should pass jshint', function() { \n      ok(true, 'ember-cli-es5-shim/components/sl-translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-es5-shim/initializers');\n    test('ember-cli-es5-shim/initializers/translate-service.js should pass jshint', function() { \n      ok(true, 'ember-cli-es5-shim/initializers/translate-service.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-es5-shim/mixins');\n    test('ember-cli-es5-shim/mixins/sl-get-translation.js should pass jshint', function() { \n      ok(true, 'ember-cli-es5-shim/mixins/sl-get-translation.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-cli-es5-shim/tests/ember-cli-es5-shim/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-es5-shim/services');\n    test('ember-cli-es5-shim/services/translate.js should pass jshint', function() { \n      ok(true, 'ember-cli-es5-shim/services/translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-esnext/components');\n    test('ember-cli-esnext/components/sl-translate.js should pass jshint', function() { \n      ok(true, 'ember-cli-esnext/components/sl-translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-esnext/initializers');\n    test('ember-cli-esnext/initializers/translate-service.js should pass jshint', function() { \n      ok(true, 'ember-cli-esnext/initializers/translate-service.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-esnext/mixins');\n    test('ember-cli-esnext/mixins/sl-get-translation.js should pass jshint', function() { \n      ok(true, 'ember-cli-esnext/mixins/sl-get-translation.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-cli-esnext/services');\n    test('ember-cli-esnext/services/translate.js should pass jshint', function() { \n      ok(true, 'ember-cli-esnext/services/translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-data/tests/ember-data/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-data/components');\n    test('ember-data/components/sl-translate.js should pass jshint', function() { \n      ok(true, 'ember-data/components/sl-translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-data/tests/ember-data/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-data/initializers');\n    test('ember-data/initializers/translate-service.js should pass jshint', function() { \n      ok(true, 'ember-data/initializers/translate-service.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-data/tests/ember-data/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-data/mixins');\n    test('ember-data/mixins/sl-get-translation.js should pass jshint', function() { \n      ok(true, 'ember-data/mixins/sl-get-translation.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-data/tests/ember-data/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-data/services');\n    test('ember-data/services/translate.js should pass jshint', function() { \n      ok(true, 'ember-data/services/translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-export-application-global/tests/ember-export-application-global/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-export-application-global/components');\n    test('ember-export-application-global/components/sl-translate.js should pass jshint', function() { \n      ok(true, 'ember-export-application-global/components/sl-translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-export-application-global/tests/ember-export-application-global/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-export-application-global/initializers');\n    test('ember-export-application-global/initializers/translate-service.js should pass jshint', function() { \n      ok(true, 'ember-export-application-global/initializers/translate-service.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-export-application-global/tests/ember-export-application-global/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-export-application-global/mixins');\n    test('ember-export-application-global/mixins/sl-get-translation.js should pass jshint', function() { \n      ok(true, 'ember-export-application-global/mixins/sl-get-translation.js should pass jshint.'); \n    });\n  });","define(\"dummy/ember-export-application-global/tests/ember-export-application-global/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - ember-export-application-global/services');\n    test('ember-export-application-global/services/translate.js should pass jshint', function() { \n      ok(true, 'ember-export-application-global/services/translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: 'export-application-global',\n\n      initialize: initialize\n    };\n  });","define(\"dummy/initializers/translate-service\", \n  [\"sl-ember-translate/initializers/translate-service\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var initializer = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name: 'translate-service',\n\n      initialize: initializer\n    };\n  });","define(\"dummy/live-reload-middleware/tests/live-reload-middleware/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - live-reload-middleware/components');\n    test('live-reload-middleware/components/sl-translate.js should pass jshint', function() { \n      ok(true, 'live-reload-middleware/components/sl-translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/live-reload-middleware/tests/live-reload-middleware/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - live-reload-middleware/initializers');\n    test('live-reload-middleware/initializers/translate-service.js should pass jshint', function() { \n      ok(true, 'live-reload-middleware/initializers/translate-service.js should pass jshint.'); \n    });\n  });","define(\"dummy/live-reload-middleware/tests/live-reload-middleware/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - live-reload-middleware/mixins');\n    test('live-reload-middleware/mixins/sl-get-translation.js should pass jshint', function() { \n      ok(true, 'live-reload-middleware/mixins/sl-get-translation.js should pass jshint.'); \n    });\n  });","define(\"dummy/live-reload-middleware/tests/live-reload-middleware/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - live-reload-middleware/services');\n    test('live-reload-middleware/services/translate.js should pass jshint', function() { \n      ok(true, 'live-reload-middleware/services/translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n        this.route( 'index', { path: '/' });\n        this.route( 'demo' );\n    });\n\n    __exports__[\"default\"] = Router;\n  });","define(\"dummy/routes/demo\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n\n        actions: {\n            updateStringValues: function() {\n                this.controllerFor( 'demo' ).set( 'valueToDisplay', 'New Updated Value - ' + Math.random() );\n            }\n        },\n\n        model: function() {\n            return Ember.Object.create({\n                'SIMPLE_KEY'   : 'I have been translated',\n                'SINGULAR_KEY' : 'View my family',\n                'PLURAL_KEY'   : 'View my families',\n                'REPLACED_KEY' : 'I have replaced {0} and {1}'\n            });\n        },\n\n        setupController: function( controller, model ) {\n            controller.get( 'translateService' ).setDictionary( model );\n        }\n    });\n  });","define(\"dummy/sl-ember-translate/tests/sl-ember-translate/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - sl-ember-translate/components');\n    test('sl-ember-translate/components/sl-translate.js should pass jshint', function() { \n      ok(true, 'sl-ember-translate/components/sl-translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/sl-ember-translate/tests/sl-ember-translate/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - sl-ember-translate/initializers');\n    test('sl-ember-translate/initializers/translate-service.js should pass jshint', function() { \n      ok(true, 'sl-ember-translate/initializers/translate-service.js should pass jshint.'); \n    });\n  });","define(\"dummy/sl-ember-translate/tests/sl-ember-translate/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - sl-ember-translate/mixins');\n    test('sl-ember-translate/mixins/sl-get-translation.js should pass jshint', function() { \n      ok(true, 'sl-ember-translate/mixins/sl-get-translation.js should pass jshint.'); \n    });\n  });","define(\"dummy/sl-ember-translate/tests/sl-ember-translate/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - sl-ember-translate/services');\n    test('sl-ember-translate/services/translate.js should pass jshint', function() { \n      ok(true, 'sl-ember-translate/services/translate.js should pass jshint.'); \n    });\n  });","define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"<i class=\\\"fa fa-home\\\"></i> Home\");\n      }\n\n      data.buffer.push(\"<br>\\n<div class=\\\"container\\\">\\n\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n            <div class=\\\"btn-group pull-right\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\">\\n                    <i class=\\\"fa fa-reorder\\\"></i> <span class=\\\"caret\\\"></span>\\n                </button>\\n\\n                <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\n                <li>\");\n      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"index\", options) : helperMissing.call(depth0, \"link-to\", \"index\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/README.md\\\"><i class=\\\"fa fa-wrench\\\"></i> Get Started</a></li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/CONTRIBUTING.md\\\"><i class=\\\"fa fa-cog\\\"></i> Contribution Guide</a></li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/stargazers\\\"><i class=\\\"fa fa-star\\\"></i> Star Our Repo</a></li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/fork\\\"><i class=\\\"fa fa-code-fork\\\"></i> Fork Our Repo</a></li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n\\n    \");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n    <br><br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12 text-center\\\">\\n            <p>npm install sl-ember-translate</p>\\n            <p><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/LICENSE.md\\\">MIT Licensed</a></p>\\n        </div>\\n    </div>\\n</div>\");\n      return buffer;\n      \n    });\n  });","define(\"dummy/templates/demo\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-12 text-center\\\">\\n        <h1>Usage Demonstration</h1>\\n        <p class=\\\"lead\\\">View the source code of the dummy application for syntax employed in this demo</p>\\n    </div>\\n</div>\\n\\n<h4>Simple Key</h4>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers['sl-translate'] || (depth0 && depth0['sl-translate']),options={hash:{\n        'key': (\"SIMPLE_KEY\")\n      },hashTypes:{'key': \"STRING\"},hashContexts:{'key': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\\n<br><br>\\n<h4>Singular/Plural Keys</h4>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers['sl-translate'] || (depth0 && depth0['sl-translate']),options={hash:{\n        'key': (\"SINGULAR_KEY\"),\n        'pluralKey': (\"PLURAL_KEY\"),\n        'pluralCount': (\"1\")\n      },hashTypes:{'key': \"STRING\",'pluralKey': \"STRING\",'pluralCount': \"STRING\"},hashContexts:{'key': depth0,'pluralKey': depth0,'pluralCount': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"<br>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers['sl-translate'] || (depth0 && depth0['sl-translate']),options={hash:{\n        'key': (\"SINGULAR_KEY\"),\n        'pluralKey': (\"PLURAL_KEY\"),\n        'pluralCount': (\"3\")\n      },hashTypes:{'key': \"STRING\",'pluralKey': \"STRING\",'pluralCount': \"STRING\"},hashContexts:{'key': depth0,'pluralKey': depth0,'pluralCount': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\\n<br><br>\\n<h4>Replaced Values In Keys</h4>\\nOriginal String: \");\n      data.buffer.push(escapeExpression((helper = helpers['sl-translate'] || (depth0 && depth0['sl-translate']),options={hash:{\n        'key': (\"REPLACED_KEY\")\n      },hashTypes:{'key': \"STRING\"},hashContexts:{'key': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"<br>\\nReplaced String: \");\n      data.buffer.push(escapeExpression((helper = helpers['sl-translate'] || (depth0 && depth0['sl-translate']),options={hash:{\n        'key': (\"REPLACED_KEY\"),\n        '$0': (\"First\"),\n        '$1': (\"Unicorn\")\n      },hashTypes:{'key': \"STRING\",'$0': \"STRING\",'$1': \"STRING\"},hashContexts:{'key': depth0,'$0': depth0,'$1': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\\n<br><br>\\n<h4>Bound Replacement Values In Keys</h4>\\nString Will Update: \");\n      data.buffer.push(escapeExpression((helper = helpers['sl-translate'] || (depth0 && depth0['sl-translate']),options={hash:{\n        'key': (\"REPLACED_KEY\"),\n        '$0': (\"First\"),\n        '$1Binding': (\"valueToDisplay\")\n      },hashTypes:{'key': \"STRING\",'$0': \"STRING\",'$1Binding': \"STRING\"},hashContexts:{'key': depth0,'$0': depth0,'$1Binding': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n<br><br>\\n<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"updateStringValues\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Update Values</button>\\n\\n<br><br>\\n<h4>Used alongside other properties or attribute bindings</h4>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers['sl-translate'] || (depth0 && depth0['sl-translate']),options={hash:{\n        'tagName': (\"em\"),\n        'key': (\"REPLACED_KEY\"),\n        '$0': (\"First\"),\n        '$1': (\"Dragon\")\n      },hashTypes:{'tagName': \"STRING\",'key': \"STRING\",'$0': \"STRING\",'$1': \"STRING\"},hashContexts:{'tagName': depth0,'key': depth0,'$0': depth0,'$1': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });","define(\"dummy/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"<i class=\\\"fa fa-cubes fa-5x\\\"></i>\");\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"<b>Demo</b>\");\n      }\n\n      data.buffer.push(\"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-12 text-center\\\">\\n        <h1>sl-ember-translate</h1>\\n        <p class=\\\"lead\\\">An Ember CLI Addon that provides the ability to lookup a dictionary value through method calls or via a component in your templates.</p>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-md-4 text-center\\\">\\n        <h3>\");\n      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"demo\", options) : helperMissing.call(depth0, \"link-to\", \"demo\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</h3>\\n        <p>\");\n      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"demo\", options) : helperMissing.call(depth0, \"link-to\", \"demo\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n    </div>\\n    <div class=\\\"col-md-4 text-center\\\">\\n        <h3><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/README.md\\\"><i class=\\\"fa fa-book fa-5x\\\"></i></a></h3>\\n        <p><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/README.md\\\"><b>Documentation</b></a></p>\\n    </div>\\n    <div class=\\\"col-md-4 text-center\\\">\\n        <h3><a href=\\\"https://github.com/softlayer/sl-ember-translate\\\"><i class=\\\"fa fa-github fa-5x\\\"></i></a></h3>\\n        <p><a href=\\\"https://github.com/softlayer/sl-ember-translate\\\"><b>Available on GitHub</b></a></p>\\n    </div>\\n</div>\");\n      return buffer;\n      \n    });\n  });","define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - .');\n    test('app.js should pass jshint', function() { \n      ok(true, 'app.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/controllers/demo.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - controllers');\n    test('controllers/demo.js should pass jshint', function() { \n      ok(true, 'controllers/demo.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - dummy/tests/helpers');\n    test('dummy/tests/helpers/resolver.js should pass jshint', function() { \n      ok(true, 'dummy/tests/helpers/resolver.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - dummy/tests/helpers');\n    test('dummy/tests/helpers/start-app.js should pass jshint', function() { \n      ok(true, 'dummy/tests/helpers/start-app.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - dummy/tests');\n    test('dummy/tests/test-helper.js should pass jshint', function() { \n      ok(true, 'dummy/tests/test-helper.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/dummy/tests/unit/components/sl-translate-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - dummy/tests/unit/components');\n    test('dummy/tests/unit/components/sl-translate-test.js should pass jshint', function() { \n      ok(true, 'dummy/tests/unit/components/sl-translate-test.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/dummy/tests/unit/initializers/translate-service-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - dummy/tests/unit/initializers');\n    test('dummy/tests/unit/initializers/translate-service-test.js should pass jshint', function() { \n      ok(true, 'dummy/tests/unit/initializers/translate-service-test.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/dummy/tests/unit/mixins/sl-get-translation-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - dummy/tests/unit/mixins');\n    test('dummy/tests/unit/mixins/sl-get-translation-test.js should pass jshint', function() { \n      ok(true, 'dummy/tests/unit/mixins/sl-get-translation-test.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/dummy/tests/unit/services/translate-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - dummy/tests/unit/services');\n    test('dummy/tests/unit/services/translate-test.js should pass jshint', function() { \n      ok(true, 'dummy/tests/unit/services/translate-test.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });","define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var application;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        application = Application.create(attributes);\n        application.setupForTesting();\n        application.injectTestHelpers();\n      });\n\n      return application;\n    }\n  });","define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - .');\n    test('router.js should pass jshint', function() { \n      ok(true, 'router.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/routes/demo.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - routes');\n    test('routes/demo.js should pass jshint', function() { \n      ok(true, 'routes/demo.js should pass jshint.'); \n    });\n  });","define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write('<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>');\n\n    QUnit.config.urlConfig.push({ id: 'nocontainer', label: 'Hide container'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? 'hidden' : 'visible';\n    document.getElementById('ember-testing-container').style.visibility = containerVisibility;\n  });","define(\"dummy/tests/unit/components/sl-translate-test\", \n  [\"ember\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleForComponent = __dependency2__.moduleForComponent;\n\n    var translateService = Ember.Object.create({\n            translateKey: function( data ) {\n                this.set( 'key', data.key );\n                this.set( 'pluralKey', data.pluralKey );\n                this.set( 'pluralCount', data.pluralCount );\n                this.set( 'parameters', data.parameters );\n\n                return 'TRANSLATE: ' + data.key;\n            }\n        });\n\n    moduleForComponent( 'sl-translate', 'Unit - component:sl-translate' );\n\n    /**\n     * Ensures that the template is wrapping the content in a span tag and not in any block-level tags. While it appears\n     * that core Ember functionality is being tested this test is ensuring that the implied contract about how this non-UI\n     * component is rendered into the DOM is adhered to.\n     */\n    test( 'Renders as a span tag with no classes', function() {\n        var component  = this.subject({ translateService: translateService }),\n            $component = this.append();\n\n        equal( $component.prop( 'tagName' ), 'SPAN' );\n        equal( $component.prop( 'class'), 'ember-view' );\n    });\n\n    /**\n     * That it renders and functions as expected\n     */\n    test( 'DOM and content of rendered translation', function() {\n        var component = this.subject({\n                key              : 'the_key',\n                translateService : translateService\n            }),\n            $component = this.append();\n\n        equal( $component.text(), 'TRANSLATE: the_key' );\n    });\n\n    /**\n     * Ensure haven't broken any default behavior of Ember, since manipulate properties passed to the component\n     * A side effect of this test is the appearance that core Ember functionality is being tested\n     */\n    test( 'Can be used alongside other properties or attribute bindings', function() {\n        var component  = this.subject({\n                translateService : translateService,\n                key              : 'key_alongside',\n                tagName          : 'h1',\n                classNames       : [ 'testClass' ]\n            }),\n            $component = this.append();\n\n        equal( $component.prop( 'tagName' ), 'H1' );\n        equal( $component.text(), 'TRANSLATE: key_alongside' );\n        equal( $component.prop( 'class'), ['ember-view testClass'] );\n    });\n\n    test( 'On initialization, extractParameterKeys() filters passed parameters', function() {\n        var component = this.subject({\n                key         : 'the_key',\n                pluralKey   : 'plural_key',\n                pluralCount : 'plural_count',\n                $0          : 'a',\n                $1Binding   : 'b',\n                $2          : 'c'\n            });\n\n        deepEqual( component.get( 'parameters' ).sort(), [ '$0', '$1', '$2' ] );\n    });\n\n    test( 'On initialization, extractParameterKeys() filters passed parameters to be bound', function() {\n        var component = this.subject({\n                key         : 'the_key',\n                pluralKey   : 'plural_key',\n                pluralCount : 'plural_count',\n                $0          : 'a',\n                $1Binding   : 'b',\n                $2          : 'c'\n            });\n\n        deepEqual( component.get( 'observedParameters' ), [ '$1' ] );\n    });\n\n    test( 'setTranslatedString() sets translatedString property with value from translateString()', function() {\n        var component = this.subject();\n\n        component.translateString = function() {\n            return 'test value';\n        };\n\n        component.setTranslatedString();\n\n        equal( component.get( 'translatedString' ), 'test value' );\n    });\n\n    test( 'translateString() calls translateKey() on the translation service', function() {\n        var component = this.subject({\n                translateService : translateService,\n                key              : 'the_key',\n                pluralKey        : 'plural_key',\n                pluralCount      : 'plural_count',\n                $0               : 'a',\n                $1               : 'b'\n            }),\n            $component = this.append();\n\n        equal( translateService.get( 'key' ), 'the_key' );\n        equal( translateService.get( 'pluralKey' ), 'plural_key' );\n        equal( translateService.get( 'pluralCount' ), 'plural_count' );\n        deepEqual( translateService.get( 'parameters' ), { $0: 'a', $1: 'b' } );\n    });\n\n    test( 'willInsertElement event causes setTranslatedString() to be called', function() {\n        var component                    = this.subject(),\n            setTranslatedStringWasCalled = false;\n\n        component.setTranslatedString = function() {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        this.append();\n\n        equal( setTranslatedStringWasCalled, true );\n    });\n\n    test( 'willInsertElement event causes observers to be added to each entry in observedParameters property', function() {\n        var component = this.subject({\n                translateService : translateService,\n                key              : 'the_key',\n                $0Binding        : 'a',\n                $1               : 'b'\n            }),\n            setTranslatedStringWasCalled = false,\n            $component;\n\n        component.setTranslatedString = function() {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        $component = this.append();\n\n        // Change value so can monitor for change\n        setTranslatedStringWasCalled = false;\n\n        Ember.run( function(){\n            component.set( '$0', 'c' );\n        });\n\n        equal( setTranslatedStringWasCalled, true );\n    });\n\n    test( 'willClearRender event causes observers to be removed', function() {\n        var component = this.subject({\n                translateService : translateService,\n                key              : 'the_key',\n                $0Binding        : 'a',\n                $1               : 'b'\n            }),\n            setTranslatedStringWasCalled = false,\n            $component;\n\n        component.setTranslatedString = function() {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        $component = this.append();\n\n        // Change value so can monitor for change\n        setTranslatedStringWasCalled = false;\n\n        component.trigger( 'willClearRender' );\n\n        Ember.run( function(){\n            component.set( '$0', 'c' );\n        });\n\n        equal( setTranslatedStringWasCalled, false );\n    });\n  });","define(\"dummy/tests/unit/initializers/translate-service-test\", \n  [\"ember\",\"ember-qunit\",\"dummy/tests/helpers/start-app\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleForComponent = __dependency2__.moduleForComponent;\n    var startApp = __dependency3__[\"default\"];\n\n    var App;\n\n    module( 'Unit - initializer:translate-service', {\n        setup: function() {\n            App = startApp();\n        },\n\n        teardown: function() {\n            Ember.run( App, App.destroy );\n        }\n    });\n\n    test( 'Registered on container as a singleton', function() {\n        equal( typeof App.__container__.lookup( 'translateService:main' ), 'object' );\n        notEqual( App.__container__._options['translateService:main'].instantiate, 'undefined' );\n        equal( App.__container__._options['translateService:main'].instantiate, false );\n    });\n\n    test( 'Injected on controllers', function() {\n        var findBy = App.__container__.typeInjections.controller.findBy( 'fullName', 'translateService:main' );\n\n        notEqual( findBy, 'undefined' );\n        equal( findBy.property, 'translateService' );\n    });\n\n    test( 'Injected on views', function() {\n        var findBy = App.__container__.typeInjections.view.findBy( 'fullName', 'translateService:main' );\n\n        notEqual( findBy, 'undefined' );\n        equal( findBy.property, 'translateService' );\n    });\n\n    test( 'Injected on components', function() {\n        var findBy = App.__container__.typeInjections.component.findBy( 'fullName', 'translateService:main' );\n\n        notEqual( findBy, 'undefined' );\n        equal( findBy.property, 'translateService' );\n    });\n  });","define(\"dummy/tests/unit/mixins/sl-get-translation-test\", \n  [\"ember\",\"sl-ember-translate/mixins/sl-get-translation\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var mixinUnderTest = __dependency2__[\"default\"];\n\n    module( 'Unit - mixins:sl-get-translation' );\n\n    test( 'Successfully mixed', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest ),\n            subject    = testObject.create();\n\n        ok( subject );\n    });\n\n    test( 'Call to get() with a key not beginning with \"translate.\" is not intercepted', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest, {\n                testKey: 'testValue'\n            }),\n            subject    = testObject.create();\n\n        equal( subject.get( 'testKey' ), 'testValue' );\n    });\n\n    test( 'Call to get() with a key beginning with \"translate.\" calls this.translate()', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest, {\n                translate: function( value ) {\n                    return value;\n                }\n            }),\n            subject    = testObject.create();\n\n        equal( subject.get( 'translate.testingKey' ), 'testingKey' );\n    });\n\n    test( 'translate() returns call to this.translateService.getKeyValue()', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest, {\n                translateService: {\n                    getKeyValue: function( value ) {\n                        return value;\n                    }\n                }\n            }),\n            subject    = testObject.create();\n\n        equal( subject.translate( 'called' ), 'called' );\n    });\n  });","define(\"dummy/tests/unit/services/translate-test\", \n  [\"ember\",\"ember-qunit\",\"sl-ember-translate/services/translate\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var TranslateService = __dependency3__[\"default\"];\n\n    var TS;\n\n    module( 'Unit - services:translate', {\n        setup: function() {\n            TS = TranslateService.create();\n        }\n    });\n\n    test( 'container property defaults to null', function() {\n        expect(1);\n\n        equal( TS.get( 'container' ), null );\n    });\n\n    test( 'dictionary property defaults to null', function() {\n        expect(1);\n\n        equal( TS.get( 'dictionary' ), null );\n    });\n\n    test( 'setDictionary() sets data on the dictionary property', function() {\n        expect(1);\n\n        var testDictionary = Ember.Object.create( { 'the_key': 'my value' } );\n\n        TS.setDictionary( testDictionary );\n\n        deepEqual( TS.get( 'dictionary' ), testDictionary );\n    });\n\n    test( 'getKeyValue() returns requested key if not found in dictionary', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( { 'the_key': 'my value' } ) );\n\n        notEqual( TS.getKeyValue( 'wrong_key' ), 'the_key' );\n    });\n\n    test( 'getKeyValue() returns requested key\\'s translated string', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( { 'the_key': 'my value' } ) );\n\n        equal( TS.getKeyValue( 'the_key' ), 'my value' );\n    });\n\n    test( 'translateKey() requires an argument to be provided', function() {\n        expect(1);\n\n        var assertionThrown = false;\n\n        try {\n            TS.translateKey();\n        } catch( error ) {\n            assertionThrown = true;\n        }\n\n        ok( assertionThrown );\n    });\n\n    test( 'translateKey() returns translated string for specified key', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( { 'the_key': 'my value' } ) );\n\n        equal( TS.getKeyValue( 'the_key' ), 'my value' );\n    });\n\n    test( 'If either \"pluralKey\" or \"pluralCount\" are provided to translateKey() then both must be', function() {\n        expect(2);\n\n        equal( TS.translateKey( { key: 'singular_key', pluralKey: 'plural_key' } ), 'singular_key' );\n        equal( TS.translateKey( { key: 'singular_key', pluralCount: 3 } ), 'singular_key' );\n    });\n\n    test( 'Pluralization only works if \"pluralCount\" is a number', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( {\n            'the_singular_key' : 'Singular translated value',\n            'the_plural_key'   : 'Plural translated value'\n        }));\n\n        notEqual( TS.translateKey( { key: 'the_singular_key', pluralKey: 'the_plural_key', pluralCount: 'two' } ), 'Plural translated value' );\n    });\n\n    test( 'Pluralization occurs when provided the necessary information', function() {\n        expect(2);\n\n        TS.setDictionary( Ember.Object.create( {\n            'the_singular_key' : 'Singular translated value',\n            'the_plural_key'   : 'Plural translated value'\n        }));\n\n        equal( TS.translateKey( { key: 'the_singular_key', pluralKey: 'the_plural_key', pluralCount: 0 } ), 'Singular translated value' );\n        equal( TS.translateKey( { key: 'the_singular_key', pluralKey: 'the_plural_key', pluralCount: 3 } ), 'Plural translated value' );\n    });\n\n    test( 'Token replacement in translation string', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( {\n            'the_key': 'Replaced values: {0} and {1}'\n        }));\n\n        equal( TS.translateKey({\n            key        : 'the_key',\n            parameters : {\n                $0: 'ASDF',\n                $1: 1234\n            }\n        }), 'Replaced values: ASDF and 1234' );\n    });\n  });","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbvzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}