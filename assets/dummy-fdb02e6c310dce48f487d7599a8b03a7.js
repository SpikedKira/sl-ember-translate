define("dummy/app",["ember","ember/resolver","ember/load-initializers","dummy/config/environment","exports"],function(e,t,a,s,n){"use strict";var l=e["default"],r=t["default"],i=a["default"],o=s["default"];l.MODEL_FACTORY_INJECTIONS=!0;var u=l.Application.extend({modulePrefix:o.modulePrefix,podModulePrefix:o.podModulePrefix,Resolver:r});i(u,o.modulePrefix),n["default"]=u}),define("dummy/components/sl-translate",["sl-ember-translate/components/sl-translate","exports"],function(e,t){"use strict";var a=e["default"];t["default"]=a}),define("dummy/controllers/demo",["ember","exports"],function(e,t){"use strict";var a=e["default"];t["default"]=a.Controller.extend({valueToDisplay:"Unicorn"})}),define("dummy/initializers/export-application-global",["ember","dummy/config/environment","exports"],function(e,t,a){"use strict";function s(e,t){var a=n.String.classify(l.modulePrefix);l.exportApplicationGlobal&&(window[a]=t)}var n=e["default"],l=t["default"];a.initialize=s,a["default"]={name:"export-application-global",initialize:s}}),define("dummy/initializers/translate-service",["sl-ember-translate/initializers/translate-service","exports"],function(e,t){"use strict";var a=e["default"];t["default"]={name:"translate-service",initialize:a}}),define("dummy/router",["ember","dummy/config/environment","exports"],function(e,t,a){"use strict";var s=e["default"],n=t["default"],l=s.Router.extend({location:n.locationType});l.map(function(){this.route("index",{path:"/"}),this.route("demo")}),a["default"]=l}),define("dummy/routes/demo",["ember","exports"],function(e,t){"use strict";var a=e["default"];t["default"]=a.Route.extend({actions:{updateStringValues:function(){this.controllerFor("demo").set("valueToDisplay","New Updated Value - "+Math.random())}},model:function(){return a.Object.create({SIMPLE_KEY:"I have been translated",SINGULAR_KEY:"View my family",PLURAL_KEY:"View my families",REPLACED_KEY:"I have replaced {0} and {1}"})},setupController:function(e,t){e.get("translateService").setDictionary(t)}})}),define("dummy/templates/application",["ember","exports"],function(e,t){"use strict";var a=e["default"];t["default"]=a.Handlebars.template(function(e,t,s,n,l){function r(e,t){t.buffer.push('<i class="fa fa-home"></i> Home')}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,a.Handlebars.helpers),l=l||{};var i,o,u,d="",h=this,f=s.helperMissing;return l.buffer.push('<br>\n<div class="container">\n\n    <div class="row">\n        <div class="col-md-12">\n            <div class="btn-group pull-right">\n                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\n                    <i class="fa fa-reorder"></i> <span class="caret"></span>\n                </button>\n\n                <ul class="dropdown-menu" role="menu">\n                <li>'),o=s["link-to"]||t&&t["link-to"],u={hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(1,r,l),contexts:[t],types:["STRING"],data:l},i=o?o.call(t,"index",u):f.call(t,"link-to","index",u),(i||0===i)&&l.buffer.push(i),l.buffer.push('</li>\n                <li><a href="https://github.com/softlayer/sl-ember-translate/blob/master/README.md"><i class="fa fa-wrench"></i> Get Started</a></li>\n                <li><a href="https://github.com/softlayer/sl-ember-translate/blob/master/CONTRIBUTING.md"><i class="fa fa-cog"></i> Contribution Guide</a></li>\n                <li><a href="https://github.com/softlayer/sl-ember-translate/stargazers"><i class="fa fa-star"></i> Star Our Repo</a></li>\n                <li><a href="https://github.com/softlayer/sl-ember-translate/fork"><i class="fa fa-code-fork"></i> Fork Our Repo</a></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    '),i=s._triageMustache.call(t,"outlet",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:l}),(i||0===i)&&l.buffer.push(i),l.buffer.push('\n\n    <br><br>\n    <div class="row">\n        <div class="col-md-12 text-center">\n            <p>npm install sl-ember-translate</p>\n            <p><a href="https://github.com/softlayer/sl-ember-translate/blob/master/LICENSE.md">MIT Licensed</a></p>\n        </div>\n    </div>\n</div>'),d})}),define("dummy/templates/demo",["ember","exports"],function(e,t){"use strict";var a=e["default"];t["default"]=a.Handlebars.template(function(e,t,s,n,l){this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,a.Handlebars.helpers),l=l||{};var r,i,o="",u=s.helperMissing,d=this.escapeExpression;return l.buffer.push('<div class="row">\n    <div class="col-md-12 text-center">\n        <h1>Usage Demonstration</h1>\n        <p class="lead">View the source code of the dummy application for syntax employed in this demo</p>\n    </div>\n</div>\n\n<h4>Simple Key</h4>\n'),l.buffer.push(d((r=s["sl-translate"]||t&&t["sl-translate"],i={hash:{key:"SIMPLE_KEY"},hashTypes:{key:"STRING"},hashContexts:{key:t},contexts:[],types:[],data:l},r?r.call(t,i):u.call(t,"sl-translate",i)))),l.buffer.push("\n\n<br><br>\n<h4>Singular/Plural Keys</h4>\n"),l.buffer.push(d((r=s["sl-translate"]||t&&t["sl-translate"],i={hash:{key:"SINGULAR_KEY",pluralKey:"PLURAL_KEY",pluralCount:"1"},hashTypes:{key:"STRING",pluralKey:"STRING",pluralCount:"STRING"},hashContexts:{key:t,pluralKey:t,pluralCount:t},contexts:[],types:[],data:l},r?r.call(t,i):u.call(t,"sl-translate",i)))),l.buffer.push("<br>\n"),l.buffer.push(d((r=s["sl-translate"]||t&&t["sl-translate"],i={hash:{key:"SINGULAR_KEY",pluralKey:"PLURAL_KEY",pluralCount:"3"},hashTypes:{key:"STRING",pluralKey:"STRING",pluralCount:"STRING"},hashContexts:{key:t,pluralKey:t,pluralCount:t},contexts:[],types:[],data:l},r?r.call(t,i):u.call(t,"sl-translate",i)))),l.buffer.push("\n\n<br><br>\n<h4>Replaced Values In Keys</h4>\nOriginal String: "),l.buffer.push(d((r=s["sl-translate"]||t&&t["sl-translate"],i={hash:{key:"REPLACED_KEY"},hashTypes:{key:"STRING"},hashContexts:{key:t},contexts:[],types:[],data:l},r?r.call(t,i):u.call(t,"sl-translate",i)))),l.buffer.push("<br>\nReplaced String: "),l.buffer.push(d((r=s["sl-translate"]||t&&t["sl-translate"],i={hash:{key:"REPLACED_KEY",$0:"First",$1:"Unicorn"},hashTypes:{key:"STRING",$0:"STRING",$1:"STRING"},hashContexts:{key:t,$0:t,$1:t},contexts:[],types:[],data:l},r?r.call(t,i):u.call(t,"sl-translate",i)))),l.buffer.push("\n\n<br><br>\n<h4>Bound Replacement Values In Keys</h4>\nString Will Update: "),l.buffer.push(d((r=s["sl-translate"]||t&&t["sl-translate"],i={hash:{key:"REPLACED_KEY",$0:"First",$1Binding:"valueToDisplay"},hashTypes:{key:"STRING",$0:"STRING",$1Binding:"STRING"},hashContexts:{key:t,$0:t,$1Binding:t},contexts:[],types:[],data:l},r?r.call(t,i):u.call(t,"sl-translate",i)))),l.buffer.push("\n<br><br>\n<button "),l.buffer.push(d(s.action.call(t,"updateStringValues",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:l}))),l.buffer.push(">Update Values</button>\n\n<br><br>\n<h4>Used alongside other properties or attribute bindings</h4>\n"),l.buffer.push(d((r=s["sl-translate"]||t&&t["sl-translate"],i={hash:{tagName:"em",key:"REPLACED_KEY",$0:"First",$1:"Dragon"},hashTypes:{tagName:"STRING",key:"STRING",$0:"STRING",$1:"STRING"},hashContexts:{tagName:t,key:t,$0:t,$1:t},contexts:[],types:[],data:l},r?r.call(t,i):u.call(t,"sl-translate",i)))),l.buffer.push("\n"),o})}),define("dummy/templates/index",["ember","exports"],function(e,t){"use strict";var a=e["default"];t["default"]=a.Handlebars.template(function(e,t,s,n,l){function r(e,t){t.buffer.push('<i class="fa fa-cubes fa-5x"></i>')}function i(e,t){t.buffer.push("<b>Demo</b>")}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,a.Handlebars.helpers),l=l||{};var o,u,d,h="",f=this,p=s.helperMissing;return l.buffer.push('<div class="row">\n    <div class="col-md-12 text-center">\n        <h1>sl-ember-translate</h1>\n        <p class="lead">An Ember CLI Addon that provides the ability to lookup a dictionary value through method calls or via a component in your templates.</p>\n    </div>\n</div>\n\n<div class="row">\n    <div class="col-md-4 text-center">\n        <h3>'),u=s["link-to"]||t&&t["link-to"],d={hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(1,r,l),contexts:[t],types:["STRING"],data:l},o=u?u.call(t,"demo",d):p.call(t,"link-to","demo",d),(o||0===o)&&l.buffer.push(o),l.buffer.push("</h3>\n        <p>"),u=s["link-to"]||t&&t["link-to"],d={hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(3,i,l),contexts:[t],types:["STRING"],data:l},o=u?u.call(t,"demo",d):p.call(t,"link-to","demo",d),(o||0===o)&&l.buffer.push(o),l.buffer.push('</p>\n    </div>\n    <div class="col-md-4 text-center">\n        <h3><a href="https://github.com/softlayer/sl-ember-translate/blob/master/README.md"><i class="fa fa-book fa-5x"></i></a></h3>\n        <p><a href="https://github.com/softlayer/sl-ember-translate/blob/master/README.md"><b>Documentation</b></a></p>\n    </div>\n    <div class="col-md-4 text-center">\n        <h3><a href="https://github.com/softlayer/sl-ember-translate"><i class="fa fa-github fa-5x"></i></a></h3>\n        <p><a href="https://github.com/softlayer/sl-ember-translate"><b>Available on GitHub</b></a></p>\n    </div>\n</div>'),h})}),define("dummy/config/environment",["ember"],function(e){var t="dummy";try{var a=t+"/config/environment",s=e["default"].$('meta[name="'+a+'"]').attr("content"),n=JSON.parse(unescape(s));return{"default":n}}catch(l){throw new Error('Could not read config from meta tag with name "'+a+'".')}}),runningTests?require("dummy/tests/test-helper"):require("dummy/app")["default"].create({});