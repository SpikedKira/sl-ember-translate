eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/components\');\n    test(\'ember-cli-qunit/components/sl-translate.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/components/sl-translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/sl-translate.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/initializers\');\n    test(\'ember-cli-qunit/initializers/translate-service.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/initializers/translate-service.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/initializers/translate-service.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/mixins\');\n    test(\'ember-cli-qunit/mixins/sl-get-translation.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/mixins/sl-get-translation.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/sl-get-translation.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/services\');\n    test(\'ember-cli-qunit/services/translate.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/services/translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/services/translate.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/components/sl-translate\", \n  [\"sl-ember-translate/components/sl-translate\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var component = __dependency1__[\"default\"];\n\n    /** @module initializers/translate-service */\n    __exports__[\"default\"] = component;\n  });//# sourceURL=dummy/components/sl-translate.js");

;eval("define(\"dummy/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n        valueToDisplay: \'Unicorn\'\n    });\n  });//# sourceURL=dummy/controllers/application.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext/components\');\n    test(\'ember-cli-esnext/components/sl-translate.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/components/sl-translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/components/sl-translate.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext/initializers\');\n    test(\'ember-cli-esnext/initializers/translate-service.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/initializers/translate-service.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/initializers/translate-service.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext/mixins\');\n    test(\'ember-cli-esnext/mixins/sl-get-translation.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/mixins/sl-get-translation.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/mixins/sl-get-translation.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext/services\');\n    test(\'ember-cli-esnext/services/translate.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/services/translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/services/translate.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/components\');\n    test(\'ember-data/components/sl-translate.js should pass jshint\', function() { \n      ok(true, \'ember-data/components/sl-translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/components/sl-translate.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/initializers\');\n    test(\'ember-data/initializers/translate-service.js should pass jshint\', function() { \n      ok(true, \'ember-data/initializers/translate-service.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/initializers/translate-service.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/mixins\');\n    test(\'ember-data/mixins/sl-get-translation.js should pass jshint\', function() { \n      ok(true, \'ember-data/mixins/sl-get-translation.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/mixins/sl-get-translation.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/services\');\n    test(\'ember-data/services/translate.js should pass jshint\', function() { \n      ok(true, \'ember-data/services/translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/services/translate.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/components\');\n    test(\'ember-export-application-global/components/sl-translate.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/components/sl-translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/components/sl-translate.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/initializers\');\n    test(\'ember-export-application-global/initializers/translate-service.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/initializers/translate-service.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/initializers/translate-service.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/mixins\');\n    test(\'ember-export-application-global/mixins/sl-get-translation.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/mixins/sl-get-translation.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/mixins/sl-get-translation.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/services\');\n    test(\'ember-export-application-global/services/translate.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/services/translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/services/translate.jshint.js");

;eval("define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/export-application-global.js");

;eval("define(\"dummy/initializers/translate-service\", \n  [\"sl-ember-translate/initializers/translate-service\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var initializer = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name: \'translate-service\',\n\n      initialize: initializer\n    };\n  });//# sourceURL=dummy/initializers/translate-service.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/components\');\n    test(\'live-reload-middleware/components/sl-translate.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/components/sl-translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/components/sl-translate.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/initializers\');\n    test(\'live-reload-middleware/initializers/translate-service.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/initializers/translate-service.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/initializers/translate-service.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/mixins\');\n    test(\'live-reload-middleware/mixins/sl-get-translation.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/mixins/sl-get-translation.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/mixins/sl-get-translation.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/services\');\n    test(\'live-reload-middleware/services/translate.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/services/translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/services/translate.jshint.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/routes/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n\n        actions: {\n            updateStringValues: function() {\n                this.controllerFor( \'application\' ).set( \'valueToDisplay\', \'New Updated Value - \' + Math.random() );\n            }\n        },\n\n        model: function() {\n            return Ember.Object.create({\n                \'SIMPLE_KEY\'   : \'I have been translated\',\n                \'SINGULAR_KEY\' : \'View my family\',\n                \'PLURAL_KEY\'   : \'View my families\',\n                \'REPLACED_KEY\' : \'I have replaced {0} and {1}\'\n            });\n        },\n\n        setupController: function(controller, model) {\n            controller.get( \'translateService\' ).setDictionary( model );\n        }\n    });\n  });//# sourceURL=dummy/routes/application.js");

;eval("define(\"dummy/sl-ember-translate/tests/sl-ember-translate/components/sl-translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-translate/components\');\n    test(\'sl-ember-translate/components/sl-translate.js should pass jshint\', function() { \n      ok(true, \'sl-ember-translate/components/sl-translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-translate/tests/sl-ember-translate/components/sl-translate.jshint.js");

;eval("define(\"dummy/sl-ember-translate/tests/sl-ember-translate/initializers/translate-service.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-translate/initializers\');\n    test(\'sl-ember-translate/initializers/translate-service.js should pass jshint\', function() { \n      ok(true, \'sl-ember-translate/initializers/translate-service.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-translate/tests/sl-ember-translate/initializers/translate-service.jshint.js");

;eval("define(\"dummy/sl-ember-translate/tests/sl-ember-translate/mixins/sl-get-translation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-translate/mixins\');\n    test(\'sl-ember-translate/mixins/sl-get-translation.js should pass jshint\', function() { \n      ok(true, \'sl-ember-translate/mixins/sl-get-translation.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-translate/tests/sl-ember-translate/mixins/sl-get-translation.jshint.js");

;eval("define(\"dummy/sl-ember-translate/tests/sl-ember-translate/services/translate.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-translate/services\');\n    test(\'sl-ember-translate/services/translate.js should pass jshint\', function() { \n      ok(true, \'sl-ember-translate/services/translate.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-translate/tests/sl-ember-translate/services/translate.jshint.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<br>\\n<div class=\\\"container\\\">\\n\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n            <div class=\\\"btn-group pull-right\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\">\\n                    <i class=\\\"fa fa-reorder\\\"></i> <span class=\\\"caret\\\"></span>\\n                </button>\\n\\n                <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\n                <li><a href=\\\"/sl-ember-translate\\\"><i class=\\\"fa fa-home\\\"></i> Home</a></li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/README.md\\\"><i class=\\\"fa fa-wrench\\\"></i> Get Started</a></li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/CONTRIBUTING.md\\\"><i class=\\\"fa fa-cog\\\"></i> Contribution Guide</a></li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/stargazers\\\"><i class=\\\"fa fa-star\\\"></i> Star Our Repo</a></li>\\n                <li><a href=\\\"https://github.com/softlayer/sl-ember-translate/fork\\\"><i class=\\\"fa fa-code-fork\\\"></i> Fork Our Repo</a></li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12 text-center\\\">\\n            <h1>Usage Demonstration</h1>\\n            <p class=\\\"lead\\\">View the source code of the dummy application for syntax employed in this demo</p>\\n        </div>\\n    </div>\\n\\n    <h4>Simple Key</h4>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sl-translate\'] || (depth0 && depth0[\'sl-translate\']),options={hash:{\n        \'key\': (\"SIMPLE_KEY\")\n      },hashTypes:{\'key\': \"STRING\"},hashContexts:{\'key\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\\n    <br><br>\\n    <h4>Singular/Plural Keys</h4>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sl-translate\'] || (depth0 && depth0[\'sl-translate\']),options={hash:{\n        \'key\': (\"SINGULAR_KEY\"),\n        \'pluralKey\': (\"PLURAL_KEY\"),\n        \'pluralCount\': (\"1\")\n      },hashTypes:{\'key\': \"STRING\",\'pluralKey\': \"STRING\",\'pluralCount\': \"STRING\"},hashContexts:{\'key\': depth0,\'pluralKey\': depth0,\'pluralCount\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"<br>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sl-translate\'] || (depth0 && depth0[\'sl-translate\']),options={hash:{\n        \'key\': (\"SINGULAR_KEY\"),\n        \'pluralKey\': (\"PLURAL_KEY\"),\n        \'pluralCount\': (\"3\")\n      },hashTypes:{\'key\': \"STRING\",\'pluralKey\': \"STRING\",\'pluralCount\': \"STRING\"},hashContexts:{\'key\': depth0,\'pluralKey\': depth0,\'pluralCount\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\\n    <br><br>\\n    <h4>Replaced Values In Keys</h4>\\n    Original String: \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sl-translate\'] || (depth0 && depth0[\'sl-translate\']),options={hash:{\n        \'key\': (\"REPLACED_KEY\")\n      },hashTypes:{\'key\': \"STRING\"},hashContexts:{\'key\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"<br>\\n    Replaced String: \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sl-translate\'] || (depth0 && depth0[\'sl-translate\']),options={hash:{\n        \'key\': (\"REPLACED_KEY\"),\n        \'$0\': (\"First\"),\n        \'$1\': (\"Unicorn\")\n      },hashTypes:{\'key\': \"STRING\",\'$0\': \"STRING\",\'$1\': \"STRING\"},hashContexts:{\'key\': depth0,\'$0\': depth0,\'$1\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\\n    <br><br>\\n    <h4>Bound Replacement Values In Keys</h4>\\n    String Will Update: \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sl-translate\'] || (depth0 && depth0[\'sl-translate\']),options={hash:{\n        \'key\': (\"REPLACED_KEY\"),\n        \'$0\': (\"First\"),\n        \'$1Binding\': (\"valueToDisplay\")\n      },hashTypes:{\'key\': \"STRING\",\'$0\': \"STRING\",\'$1Binding\': \"STRING\"},hashContexts:{\'key\': depth0,\'$0\': depth0,\'$1Binding\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n    <br><br>\\n    <button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"updateStringValues\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Update Values</button>\\n\\n    <br><br>\\n    <h4>Used alongside other properties or attribute bindings</h4>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sl-translate\'] || (depth0 && depth0[\'sl-translate\']),options={hash:{\n        \'tagName\': (\"em\"),\n        \'key\': (\"REPLACED_KEY\"),\n        \'$0\': (\"First\"),\n        \'$1\': (\"Dragon\")\n      },hashTypes:{\'tagName\': \"STRING\",\'key\': \"STRING\",\'$0\': \"STRING\",\'$1\': \"STRING\"},hashContexts:{\'tagName\': depth0,\'key\': depth0,\'$0\': depth0,\'$1\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sl-translate\", options))));\n      data.buffer.push(\"\\n\\n    <br><br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12 text-center\\\">\\n            <p>npm install sl-ember-translate</p>\\n            <p><a href=\\\"https://github.com/softlayer/sl-ember-translate/blob/master/LICENSE.md\\\">MIT Licensed</a></p>\\n        </div>\\n    </div>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/application.js should pass jshint\', function() { \n      ok(true, \'controllers/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/application.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/components/sl-translate-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/components\');\n    test(\'dummy/tests/unit/components/sl-translate-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/components/sl-translate-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/components/sl-translate-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/initializers/translate-service-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/initializers\');\n    test(\'dummy/tests/unit/initializers/translate-service-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/initializers/translate-service-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/initializers/translate-service-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/mixins/sl-get-translation-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/mixins\');\n    test(\'dummy/tests/unit/mixins/sl-get-translation-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/mixins/sl-get-translation-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/mixins/sl-get-translation-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/services/translate-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/services\');\n    test(\'dummy/tests/unit/services/translate-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/services/translate-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/services/translate-test.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/application.js should pass jshint\', function() { \n      ok(true, \'routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/application.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

;eval("define(\"dummy/tests/unit/components/sl-translate-test\", \n  [\"ember\",\"ember-qunit\",\"dummy/tests/helpers/start-app\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleForComponent = __dependency2__.moduleForComponent;\n    var startApp = __dependency3__[\"default\"];\n\n    var translateService = Ember.Object.create({\n            translateKey: function(data) {\n                this.set( \'key\', data.key );\n                this.set( \'pluralKey\', data.pluralKey );\n                this.set( \'pluralCount\', data.pluralCount );\n                this.set( \'parameters\', data.parameters );\n\n                return \'TRANSLATE: \' + data.key;\n            }\n        });\n\n    moduleForComponent( \'sl-translate\', \'Unit - component:sl-translate\' );\n\n    /**\n     * Ensures that the template is wrapping the content in a span tag and not in any block-level tags. While it appears\n     * that core Ember functionality is being tested this test is ensuring that the implied contract about how this non-UI\n     * component is rendered into the DOM is adhered to.\n     */\n    test( \'Renders as a span tag with no classes\', function() {\n        var component  = this.subject({ translateService: translateService }),\n            $component = this.append();\n\n        equal( $component.prop( \'tagName\' ), \'SPAN\' );\n        equal( $component.prop( \'class\'), \'ember-view\' );\n    });\n\n    /**\n     * That it renders and functions as expected\n     */\n    test( \'DOM and content of rendered translation\', function() {\n        var component = this.subject({\n                key              : \'the_key\',\n                translateService : translateService\n            }),\n            $component = this.append();\n\n        equal( $component.text(), \'TRANSLATE: the_key\' );\n    });\n\n    /**\n     * Ensure haven\'t broken any default behavior of Ember, since manipulate properties passed to the component\n     * A side effect of this test is the appearance that core Ember functionality is being tested\n     */\n    test( \'Can be used alongside other properties or attribute bindings\', function() {\n        var component  = this.subject({\n                translateService : translateService,\n                key              : \'key_alongside\',\n                tagName          : \'h1\',\n                classNames       : [ \'testClass\' ]\n            }),\n            $component = this.append();\n\n        equal( $component.prop( \'tagName\' ), \'H1\' );\n        equal( $component.text(), \'TRANSLATE: key_alongside\' );\n        equal( $component.prop( \'class\'), [\'ember-view testClass\'] );\n    });\n\n    test( \'On initialization, extractParameterKeys() filters passed parameters\', function() {\n        var component = this.subject({\n                key         : \'the_key\',\n                pluralKey   : \'plural_key\',\n                pluralCount : \'plural_count\',\n                $0          : \'a\',\n                $1Binding   : \'b\',\n                $2          : \'c\'\n            });\n\n        deepEqual( component.get( \'parameters\' ).sort(), [ \'$0\', \'$1\', \'$2\' ] );\n    });\n\n    test( \'On initialization, extractParameterKeys() filters passed parameters to be bound\', function() {\n        var component = this.subject({\n                key         : \'the_key\',\n                pluralKey   : \'plural_key\',\n                pluralCount : \'plural_count\',\n                $0          : \'a\',\n                $1Binding   : \'b\',\n                $2          : \'c\'\n            });\n\n        deepEqual( component.get( \'observedParameters\' ), [ \'$1\' ] );\n    });\n\n    test( \'setTranslatedString() sets translatedString property with value from translateString()\', function() {\n        var component = this.subject();\n\n        component.translateString = function() {\n            return \'test value\';\n        };\n\n        component.setTranslatedString();\n\n        equal( component.get( \'translatedString\' ), \'test value\' );\n    });\n\n    test( \'translateString() calls translateKey() on the translation service\', function() {\n        var component = this.subject({\n                translateService : translateService,\n                key              : \'the_key\',\n                pluralKey        : \'plural_key\',\n                pluralCount      : \'plural_count\',\n                $0               : \'a\',\n                $1               : \'b\'\n            }),\n            $component = this.append();\n\n        equal( translateService.get( \'key\' ), \'the_key\' );\n        equal( translateService.get( \'pluralKey\' ), \'plural_key\' );\n        equal( translateService.get( \'pluralCount\' ), \'plural_count\' );\n        deepEqual( translateService.get( \'parameters\' ), { $0: \'a\', $1: \'b\' } );\n    });\n\n    test( \'willInsertElement event causes setTranslatedString() to be called\', function() {\n        var component                    = this.subject(),\n            setTranslatedStringWasCalled = false;\n\n        component.setTranslatedString = function() {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        this.append();\n\n        equal( setTranslatedStringWasCalled, true );\n    });\n\n    test( \'willInsertElement event causes observers to be added to each entry in observedParameters property\', function() {\n        var component = this.subject({\n                translateService : translateService,\n                key              : \'the_key\',\n                $0Binding        : \'a\',\n                $1               : \'b\'\n            }),\n            setTranslatedStringWasCalled = false,\n            $component;\n\n        component.setTranslatedString = function() {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        $component = this.append();\n\n        // Change value so can monitor for change\n        setTranslatedStringWasCalled = false;\n\n        Ember.run( function() {\n            component.set( \'$0\', \'c\' );\n        });\n\n        equal( setTranslatedStringWasCalled, true );\n    });\n\n    test( \'willClearRender event causes observers to be removed\', function() {\n        var component = this.subject({\n                translateService : translateService,\n                key              : \'the_key\',\n                $0Binding        : \'a\',\n                $1               : \'b\'\n            }),\n            setTranslatedStringWasCalled = false,\n            $component;\n\n        component.setTranslatedString = function() {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        $component = this.append();\n\n        // Change value so can monitor for change\n        setTranslatedStringWasCalled = false;\n\n        component.trigger( \'willClearRender\' );\n\n        Ember.run( function() {\n            component.set( \'$0\', \'c\' );\n        });\n\n        equal( setTranslatedStringWasCalled, false );\n    });\n  });//# sourceURL=dummy/tests/unit/components/sl-translate-test.js");

;eval("define(\"dummy/tests/unit/initializers/translate-service-test\", \n  [\"ember\",\"ember-qunit\",\"dummy/tests/helpers/start-app\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleForComponent = __dependency2__.moduleForComponent;\n    var startApp = __dependency3__[\"default\"];\n\n    var App;\n\n    module( \'Unit - initializer:translate-service\', {\n        setup: function() {\n            App = startApp();\n        },\n\n        teardown: function() {\n            Ember.run( App, App.destroy );\n        }\n    });\n\n    test( \'Registered on container as a singleton\', function() {\n        expect(3);\n\n        equal( typeof App.__container__.lookup( \'translateService:main\' ), \'object\' );\n        notEqual( App.__container__._options.dict[\'translateService:main\'].instantiate, \'undefined\' );\n        equal( App.__container__._options.dict[\'translateService:main\'].instantiate, false );\n    });\n\n    test( \'Injected on controllers\', function() {\n        expect(2);\n\n        var findBy = App.__container__.typeInjections.dict.controller.findBy( \'fullName\', \'translateService:main\' );\n\n        notEqual( findBy, \'undefined\' );\n        equal( findBy.property, \'translateService\' );\n    });\n\n    test( \'Injected on views\', function() {\n        expect(2);\n        var findBy = App.__container__.typeInjections.dict.view.findBy( \'fullName\', \'translateService:main\' );\n\n        notEqual( findBy, \'undefined\' );\n        equal( findBy.property, \'translateService\' );\n    });\n\n    test( \'Injected on components\', function() {\n        expect(2);\n        var findBy = App.__container__.typeInjections.dict.component.findBy( \'fullName\', \'translateService:main\' );\n\n        notEqual( findBy, \'undefined\' );\n        equal( findBy.property, \'translateService\' );\n    });\n  });//# sourceURL=dummy/tests/unit/initializers/translate-service-test.js");

;eval("define(\"dummy/tests/unit/mixins/sl-get-translation-test\", \n  [\"ember\",\"sl-ember-translate/mixins/sl-get-translation\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var mixinUnderTest = __dependency2__[\"default\"];\n\n    module( \'Unit - mixins:sl-get-translation\' );\n\n    test( \'Successfully mixed\', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest ),\n            subject    = testObject.create();\n\n        ok( subject );\n    });\n\n    test( \'Call to get() with a key not beginning with \"translate.\" is not intercepted\', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest, {\n                testKey: \'testValue\'\n            }),\n            subject    = testObject.create();\n\n        equal( subject.get( \'testKey\' ), \'testValue\' );\n    });\n\n    test( \'Call to get() with a key beginning with \"translate.\" calls this.translate()\', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest, {\n                translate: function(value) {\n                    return value;\n                }\n            }),\n            subject    = testObject.create();\n\n        equal( subject.get( \'translate.testingKey\' ), \'testingKey\' );\n    });\n\n    test( \'translate() returns call to this.translateService.getKeyValue()\', function() {\n        expect(1);\n\n        var testObject = Ember.Object.extend( mixinUnderTest, {\n                translateService: {\n                    getKeyValue: function(value) {\n                        return value;\n                    }\n                }\n            }),\n            subject    = testObject.create();\n\n        equal( subject.translate( \'called\' ), \'called\' );\n    });\n  });//# sourceURL=dummy/tests/unit/mixins/sl-get-translation-test.js");

;eval("define(\"dummy/tests/unit/services/translate-test\", \n  [\"ember\",\"ember-qunit\",\"sl-ember-translate/services/translate\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var TranslateService = __dependency3__[\"default\"];\n\n    var TS;\n\n    module( \'Unit - services:translate\', {\n        setup: function() {\n            TS = TranslateService.create();\n        }\n    });\n\n    test( \'container property defaults to null\', function() {\n        expect(1);\n\n        equal( TS.get( \'container\' ), null );\n    });\n\n    test( \'dictionary property defaults to null\', function() {\n        expect(1);\n\n        equal( TS.get( \'dictionary\' ), null );\n    });\n\n    test( \'setDictionary() sets data on the dictionary property\', function() {\n        expect(1);\n\n        var testDictionary = Ember.Object.create( { \'the_key\': \'my value\' } );\n\n        TS.setDictionary( testDictionary );\n\n        deepEqual( TS.get( \'dictionary\' ), testDictionary );\n    });\n\n    test( \'getKeyValue() returns requested key if not found in dictionary\', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( { \'the_key\': \'my value\' } ) );\n\n        notEqual( TS.getKeyValue( \'wrong_key\' ), \'the_key\' );\n    });\n\n    test( \'getKeyValue() returns requested key\\\'s translated string\', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( { \'the_key\': \'my value\' } ) );\n\n        equal( TS.getKeyValue( \'the_key\' ), \'my value\' );\n    });\n\n    test( \'translateKey() requires an argument to be provided\', function() {\n        expect(1);\n\n        var assertionThrown = false;\n\n        try {\n            TS.translateKey();\n        } catch( error ) {\n            assertionThrown = true;\n        }\n\n        ok( assertionThrown );\n    });\n\n    test( \'translateKey() returns translated string for specified key\', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( { \'the_key\': \'my value\' } ) );\n\n        equal( TS.getKeyValue( \'the_key\' ), \'my value\' );\n    });\n\n    test( \'If either \"pluralKey\" or \"pluralCount\" are provided to translateKey() then both must be\', function() {\n        expect(2);\n\n        equal( TS.translateKey( { key: \'singular_key\', pluralKey: \'plural_key\' } ), \'singular_key\' );\n        equal( TS.translateKey( { key: \'singular_key\', pluralCount: 3 } ), \'singular_key\' );\n    });\n\n    test( \'Pluralization only works if \"pluralCount\" is a number\', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( {\n            \'the_singular_key\' : \'Singular translated value\',\n            \'the_plural_key\'   : \'Plural translated value\'\n        }));\n\n        notEqual( TS.translateKey( { key: \'the_singular_key\', pluralKey: \'the_plural_key\', pluralCount: \'two\' } ), \'Plural translated value\' );\n    });\n\n    test( \'Pluralization occurs when provided the necessary information\', function() {\n        expect(2);\n\n        TS.setDictionary( Ember.Object.create( {\n            \'the_singular_key\' : \'Singular translated value\',\n            \'the_plural_key\'   : \'Plural translated value\'\n        }));\n\n        equal( TS.translateKey( { key: \'the_singular_key\', pluralKey: \'the_plural_key\', pluralCount: 0 } ), \'Singular translated value\' );\n        equal( TS.translateKey( { key: \'the_singular_key\', pluralKey: \'the_plural_key\', pluralCount: 3 } ), \'Plural translated value\' );\n    });\n\n    test( \'Token replacement in translation string\', function() {\n        expect(1);\n\n        TS.setDictionary( Ember.Object.create( {\n            \'the_key\': \'Replaced values: {0} and {1}\'\n        }));\n\n        equal( TS.translateKey({\n            key        : \'the_key\',\n            parameters : {\n                $0: \'ASDF\',\n                $1: 1234\n            }\n        }), \'Replaced values: ASDF and 1234\' );\n    });\n  });//# sourceURL=dummy/tests/unit/services/translate-test.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */




});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}




/* jshint ignore:end */
