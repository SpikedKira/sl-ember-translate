{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/components/sl-translate.js","dummy/controllers/demo.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/initializers/translate-service.js","dummy/router.js","dummy/routes/demo.js","dummy/sl-ember-translate/tests/modules/sl-ember-translate/components/sl-translate.jshint.js","dummy/sl-ember-translate/tests/modules/sl-ember-translate/initializers/translate-service.jshint.js","dummy/sl-ember-translate/tests/modules/sl-ember-translate/mixins/sl-get-translation.jshint.js","dummy/sl-ember-translate/tests/modules/sl-ember-translate/services/translate.jshint.js","dummy/templates/application.js","dummy/templates/demo.js","dummy/templates/index.js","dummy/tests/app.jshint.js","dummy/tests/blanket-options.js","dummy/tests/blanket-options.jshint.js","dummy/tests/controllers/demo.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/sl/register-test-helpers.js","dummy/tests/helpers/sl/synchronous.js","dummy/tests/helpers/sl/synchronous/ajax.js","dummy/tests/helpers/sl/synchronous/contains.js","dummy/tests/helpers/sl/synchronous/requires.js","dummy/tests/helpers/sl/utils/utils.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/demo.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/components/sl-translate-test.js","dummy/tests/unit/components/sl-translate-test.jshint.js","dummy/tests/unit/initializers/translate-service-test.js","dummy/tests/unit/initializers/translate-service-test.jshint.js","dummy/tests/unit/mixins/sl-get-translation-test.js","dummy/tests/unit/mixins/sl-get-translation-test.jshint.js","dummy/tests/unit/services/translate-test.js","dummy/tests/unit/services/translate-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/components/sl-translate', ['exports', 'sl-ember-translate/components/sl-translate'], function (exports, component) {\n\n\t'use strict';\n\n\texports['default'] = component['default'];\n\n});","define('dummy/controllers/demo', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        valueToDisplay: 'Unicorn'\n    });\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('dummy/initializers/translate-service', ['exports', 'sl-ember-translate/initializers/translate-service'], function (exports, initializer) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: 'translate-service',\n\n    initialize: initializer['default']\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n    'use strict';\n\n    var Router = Ember['default'].Router.extend({\n        location: config['default'].locationType\n    });\n\n    exports['default'] = Router.map(function () {\n        this.route('index', { path: '/' });\n        this.route('demo');\n    });\n\n});","define('dummy/routes/demo', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Route.extend({\n\n        actions: {\n            updateStringValues: function updateStringValues() {\n                this.controllerFor('demo').set('valueToDisplay', 'New Updated Value - ' + Math.random());\n            }\n        },\n\n        model: function model() {\n            return Ember['default'].Object.create({\n                SIMPLE_KEY: 'I have been translated',\n                SINGULAR_KEY: 'View my family',\n                PLURAL_KEY: 'View my families',\n                REPLACED_KEY: 'I have replaced {0} and {1}'\n            });\n        },\n\n        setupController: function setupController(controller, model) {\n            controller.get('translateService').setDictionary(model);\n        }\n    });\n\n});","define('dummy/sl-ember-translate/tests/modules/sl-ember-translate/components/sl-translate.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - modules/sl-ember-translate/components');\n  test('modules/sl-ember-translate/components/sl-translate.js should pass jshint', function () {\n    ok(true, 'modules/sl-ember-translate/components/sl-translate.js should pass jshint.');\n  });\n\n});","define('dummy/sl-ember-translate/tests/modules/sl-ember-translate/initializers/translate-service.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - modules/sl-ember-translate/initializers');\n  test('modules/sl-ember-translate/initializers/translate-service.js should pass jshint', function () {\n    ok(true, 'modules/sl-ember-translate/initializers/translate-service.js should pass jshint.');\n  });\n\n});","define('dummy/sl-ember-translate/tests/modules/sl-ember-translate/mixins/sl-get-translation.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - modules/sl-ember-translate/mixins');\n  test('modules/sl-ember-translate/mixins/sl-get-translation.js should pass jshint', function () {\n    ok(true, 'modules/sl-ember-translate/mixins/sl-get-translation.js should pass jshint.');\n  });\n\n});","define('dummy/sl-ember-translate/tests/modules/sl-ember-translate/services/translate.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - modules/sl-ember-translate/services');\n  test('modules/sl-ember-translate/services/translate.js should pass jshint', function () {\n    ok(true, 'modules/sl-ember-translate/services/translate.js should pass jshint.');\n  });\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-home\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" Home\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"container\");\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-md-12\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"btn-group pull-right\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-default dropdown-toggle\");\n        dom.setAttribute(el5,\"data-toggle\",\"dropdown\");\n        dom.setAttribute(el5,\"aria-expanded\",\"false\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"i\");\n        dom.setAttribute(el6,\"class\",\"fa fa-reorder\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"caret\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"ul\");\n        dom.setAttribute(el5,\"class\",\"dropdown-menu\");\n        dom.setAttribute(el5,\"role\",\"menu\");\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-translate/blob/master/README.md\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-wrench\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Get Started\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-translate/blob/master/CONTRIBUTING.md\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-cog\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Contribution Guide\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-translate/stargazers\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-star\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Star Our Repo\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-translate/fork\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-code-fork\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Fork Our Repo\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-md-12 text-center\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createTextNode(\"ember install sl-ember-translate\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createElement(\"a\");\n        dom.setAttribute(el5,\"href\",\"https://github.com/softlayer/sl-ember-translate/blob/master/LICENSE.md\");\n        var el6 = dom.createTextNode(\"MIT Licensed\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1, 1, 3, 1]),0,0);\n        var morph1 = dom.createMorphAt(element0,3,3);\n        block(env, morph0, context, \"link-to\", [\"index\"], {}, child0, null);\n        content(env, morph1, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/demo', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-12 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"Usage Demonstration\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"lead\");\n        var el4 = dom.createTextNode(\"View the source code of the dummy application for syntax employed in this demo\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h4\");\n        var el2 = dom.createTextNode(\"Simple Key\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h4\");\n        var el2 = dom.createTextNode(\"Singular/Plural Keys\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h4\");\n        var el2 = dom.createTextNode(\"Replaced Values In Keys\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\nOriginal String: \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\nReplaced String: \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h4\");\n        var el2 = dom.createTextNode(\"Bound Replacement Values In Keys\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\nString Will Update: \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"button\");\n        var el2 = dom.createTextNode(\"Update Values\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h4\");\n        var el2 = dom.createTextNode(\"Used alongside other properties or attribute bindings\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline, get = hooks.get, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [36]);\n        var morph0 = dom.createMorphAt(fragment,4,4,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,11,11,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,14,14,contextualElement);\n        var morph3 = dom.createMorphAt(fragment,21,21,contextualElement);\n        var morph4 = dom.createMorphAt(fragment,24,24,contextualElement);\n        var morph5 = dom.createMorphAt(fragment,31,31,contextualElement);\n        var morph6 = dom.createMorphAt(fragment,43,43,contextualElement);\n        inline(env, morph0, context, \"sl-translate\", [], {\"key\": \"SIMPLE_KEY\"});\n        inline(env, morph1, context, \"sl-translate\", [], {\"key\": \"SINGULAR_KEY\", \"pluralKey\": \"PLURAL_KEY\", \"pluralCount\": \"1\"});\n        inline(env, morph2, context, \"sl-translate\", [], {\"key\": \"SINGULAR_KEY\", \"pluralKey\": \"PLURAL_KEY\", \"pluralCount\": \"3\"});\n        inline(env, morph3, context, \"sl-translate\", [], {\"key\": \"REPLACED_KEY\"});\n        inline(env, morph4, context, \"sl-translate\", [], {\"key\": \"REPLACED_KEY\", \"$0\": \"First\", \"$1\": \"Unicorn\"});\n        inline(env, morph5, context, \"sl-translate\", [], {\"key\": \"REPLACED_KEY\", \"$0\": \"First\", \"$1\": get(env, context, \"valueToDisplay\")});\n        element(env, element0, context, \"action\", [\"updateStringValues\"], {});\n        inline(env, morph6, context, \"sl-translate\", [], {\"tagName\": \"em\", \"key\": \"REPLACED_KEY\", \"$0\": \"First\", \"$1\": \"Dragon\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-cubes fa-5x\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"b\");\n          var el2 = dom.createTextNode(\"Demo\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-12 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"sl-ember-translate\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"lead\");\n        var el4 = dom.createTextNode(\"An Ember CLI Addon that provides the ability to lookup a dictionary value through method calls or via a component in your templates.\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-4 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-4 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-translate/blob/master/README.md\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-book fa-5x\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-translate/blob/master/README.md\");\n        var el5 = dom.createElement(\"b\");\n        var el6 = dom.createTextNode(\"Documentation\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-4 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-translate\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-github fa-5x\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-translate\");\n        var el5 = dom.createElement(\"b\");\n        var el6 = dom.createTextNode(\"Available on GitHub\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,0);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,0);\n        block(env, morph0, context, \"link-to\", [\"demo\"], {}, child0, null);\n        block(env, morph1, context, \"link-to\", [\"demo\"], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/blanket-options', function () {\n\n   'use strict';\n\n   /* globals blanket */\n\n   blanket.options({\n      modulePrefix: 'dummy',\n      filter: '//.*dummy/.*/',\n      antifilter: '//.*(tests|template).*/',\n      loaderExclusions: [],\n      enableCoverage: true\n   });\n\n});","define('dummy/tests/blanket-options.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('blanket-options.js should pass jshint', function() { \n    ok(true, 'blanket-options.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/demo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/demo.js should pass jshint', function() { \n    ok(true, 'controllers/demo.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/sl/register-test-helpers', ['exports', 'ember', 'dummy/tests/helpers/sl/synchronous'], function (exports, Ember, synchronous) {\n\n    'use strict';\n\n    exports['default'] = function () {\n        Ember['default'].Test.registerHelper('contains', synchronous.contains);\n        Ember['default'].Test.registerHelper('ajax', synchronous.ajax);\n        Ember['default'].Test.registerHelper('requires', synchronous.requires);\n    }\n\n});","define('dummy/tests/helpers/sl/synchronous', ['exports', 'dummy/tests/helpers/sl/synchronous/contains', 'dummy/tests/helpers/sl/synchronous/ajax', 'dummy/tests/helpers/sl/synchronous/requires'], function (exports, contains, ajax, requires) {\n\n\t'use strict';\n\n\n\n\texports.contains = contains['default'];\n\texports.ajax = ajax['default'];\n\texports.requires = requires['default'];\n\n});","define('dummy/tests/helpers/sl/synchronous/ajax', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var AjaxHelper = function AjaxHelper() {};\n\n    /**\n     * Emulate the beginning of an AJAX request\n     *\n     * @param   {Ember.String} endpoint\n     * @returns {void}\n     */\n    AjaxHelper.prototype.begin = function (endpoint) {\n        Ember['default'].run(function () {\n            if (endpoint) {\n                $(document).trigger('ajaxSend', [null, { url: endpoint }]);\n            } else {\n                $(document).trigger('ajaxStart');\n            }\n        });\n    };\n\n    /**\n     * Emulate the conclusion of an AJAX request\n     *\n     * @param   {Ember.String} endpoint\n     * @returns {void}\n     */\n    AjaxHelper.prototype.end = function (endpoint) {\n        Ember['default'].run(function () {\n            if (endpoint) {\n                $(document).trigger('ajaxComplete', [null, { url: endpoint }]);\n            } else {\n                $(document).trigger('ajaxStop');\n            }\n        });\n    };\n\n    var helper = new AjaxHelper();\n\n    exports['default'] = helper;\n\n});","define('dummy/tests/helpers/sl/synchronous/contains', ['exports', 'ember', 'dummy/tests/helpers/sl/utils/utils'], function (exports, Ember, utils) {\n\n    'use strict';\n\n    exports['default'] = function () {\n        var index = 3 === arguments.length ? 1 : 0,\n            underTest = arguments[index],\n            testFor = arguments[index + 1];\n\n        Ember['default'].assert('First non-optional argument must be an array, string or object', 'object' === typeof underTest || 'string' === typeof underTest || Array.isArray(underTest));\n\n        Ember['default'].assert('Second non-optional argument must be an array, string or object', 'object' === typeof testFor || 'string' === typeof testFor || Array.isArray(testFor));\n\n        return utils.doArraysIntersect(utils.convertToArray(underTest), utils.convertToArray(testFor));\n    }\n\n});","define('dummy/tests/helpers/sl/synchronous/requires', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = function (methodUnderTest, requiredTypes) {\n        var typesToTest = {\n            number: {\n                required: false,\n                testValue: 123987465,\n                message: 'Parameter was a number'\n            },\n            string: {\n                required: false,\n                testValue: 'testString',\n                message: 'Parameter was a string'\n            },\n            array: {\n                required: false,\n                testValue: [],\n                message: 'Parameter was an array'\n            },\n            object: {\n                required: false,\n                testValue: {},\n                message: 'Parameter was an object'\n            },\n            'function': {\n                required: false,\n                testValue: function testValue() {},\n                message: 'Parameter was a function'\n            },\n            undefined: {\n                required: false,\n                testValue: undefined,\n                message: 'Parameter was undefined'\n            },\n            boolean: {\n                required: false,\n                testValue: true,\n                message: 'Parameter was a boolean'\n            }\n        },\n            testsThatHaveFailed = [],\n            assertionThrown,\n            assertionPassed,\n            property,\n            parameter;\n\n        Ember['default'].assert('First argument must be a function', 'function' === typeof methodUnderTest);\n        Ember['default'].assert('Second argument must be an array', Array.isArray(requiredTypes));\n\n        // Set required parameter types\n        requiredTypes.forEach(function (item) {\n            typesToTest[item].required = true;\n        });\n\n        // Test each parameter type\n        for (property in typesToTest) {\n            if (typesToTest.hasOwnProperty(property)) {\n\n                // Reset flag\n                assertionThrown = false;\n\n                // Assign cleaner object reference\n                parameter = typesToTest[property];\n\n                // Test parameter\n                try {\n                    methodUnderTest(parameter.testValue);\n                } catch (error) {\n                    assertionThrown = true;\n                }\n\n                assertionPassed = parameter.required ? !assertionThrown : assertionThrown;\n\n                if (!assertionPassed) {\n                    testsThatHaveFailed.push(parameter.message);\n                }\n            }\n        }\n\n        return {\n            requires: 0 === testsThatHaveFailed.length ? true : false,\n            messages: testsThatHaveFailed.join('; ')\n        };\n    }\n\n});","define('dummy/tests/helpers/sl/utils/utils', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var convertToArray = function convertToArray(underTest) {\n        var returnArray;\n\n        if (Array.isArray(underTest)) {\n            returnArray = underTest;\n        } else {\n            switch (typeof underTest) {\n                case 'string':\n                    returnArray = convertStringToArray(underTest);\n                    break;\n\n                case 'object':\n                    returnArray = convertObjectKeysToArray(underTest);\n                    break;\n            }\n        }\n\n        Ember['default'].assert('String, Object or Array must be supplied', 'undefined' !== typeof returnArray);\n\n        return returnArray;\n    };\n\n    /**\n     * Splits a string into an array of individual \"words\" as delineated by spaces\n     *\n     * Primarily exists to convert format of call to .prop( 'class' )\n     *\n     * @function convertStringToArray\n     * @param   {string} underTest\n     * @throws  {Ember.assert} If argument is not provided or is not a string\n     * @returns {array}\n     */\n    var convertStringToArray = function convertStringToArray(underTest) {\n\n        Ember['default'].assert('String must be supplied', 'string' === typeof underTest);\n\n        return underTest.split(' ');\n    };\n\n    /**\n     * Returns an array containing all of the property names of an object\n     *\n     * Property names are only extracted from the object provided.  No recursion into nested objects occurs.\n     *\n     * @function convertObjectKeysToArray\n     * @param   {object} underTest\n     * @throws  {Ember.assert} If argument is not provided or is not an object\n     * @returns {array}\n     */\n    var convertObjectKeysToArray = function convertObjectKeysToArray(underTest) {\n\n        Ember['default'].assert('Object must be supplied', 'object' === typeof underTest && !Array.isArray(underTest));\n\n        return Object.keys(underTest);\n    };\n\n    /**\n     * [doArraysIntersect description]\n     *\n     * @function doArraysIntersect\n     * @param  {array} underTest\n     * @param  {array} testFor\n     * @return {boolean}\n     */\n    var doArraysIntersect = function doArraysIntersect(underTest, testFor) {\n\n        Ember['default'].assert('Parameters must be Arrays', Array.isArray(underTest) && Array.isArray(testFor));\n\n        return testFor.some(function (v) {\n            return underTest.indexOf(v) >= 0;\n        });\n    };\n\n    exports.convertToArray = convertToArray;\n    exports.convertStringToArray = convertStringToArray;\n    exports.convertObjectKeysToArray = convertObjectKeysToArray;\n    exports.doArraysIntersect = doArraysIntersect;\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/tests/helpers/sl/register-test-helpers', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, slregisterTestHelpers, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      slregisterTestHelpers['default']();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/demo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/demo.js should pass jshint', function() { \n    ok(true, 'routes/demo.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/components/sl-translate-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n    'use strict';\n\n    var translateService = Ember['default'].Object.create({\n        translateKey: function translateKey(data) {\n            this.set('key', data.key);\n            this.set('pluralKey', data.pluralKey);\n            this.set('pluralCount', data.pluralCount);\n            this.set('parameters', data.parameters);\n\n            return 'TRANSLATE: ' + data.key;\n        }\n    });\n\n    ember_qunit.moduleForComponent('sl-translate', 'Unit - component:sl-translate');\n\n    /**\n     * Ensures that the template is wrapping the content in a span tag and not in\n     * any block-level tags. While it appears that core Ember functionality is being\n     * tested this test is ensuring that the implied contract about how this non-UI\n     * component is rendered into the DOM is adhered to.\n     */\n    ember_qunit.test('Renders as a span tag with no classes', function (assert) {\n        this.subject({ translateService: translateService });\n\n        assert.equal(this.$().prop('tagName'), 'SPAN');\n        assert.equal(this.$().prop('class'), 'ember-view');\n    });\n\n    /**\n     * That it renders and functions as expected\n     */\n    ember_qunit.test('DOM and content of rendered translation', function (assert) {\n        this.subject({ key: 'the_key', translateService: translateService });\n\n        assert.equal(Ember['default'].$.trim(this.$().text()), 'TRANSLATE: the_key');\n    });\n\n    /**\n     * Ensure haven't broken any default behavior of Ember, since manipulate properties passed to the component\n     * A side effect of this test is the appearance that core Ember functionality is being tested\n     */\n    ember_qunit.test('Can be used alongside other properties or attribute bindings', function (assert) {\n        this.subject({\n            translateService: translateService,\n            key: 'key_alongside',\n            tagName: 'h1',\n            classNames: ['testClass']\n        });\n\n        assert.equal(this.$().prop('tagName'), 'H1');\n        assert.equal(Ember['default'].$.trim(this.$().text()), 'TRANSLATE: key_alongside');\n        assert.equal(this.$().prop('class'), ['ember-view testClass']);\n    });\n\n    ember_qunit.test('On initialization, extractParameterKeys() filters passed parameters', function (assert) {\n        var component = this.subject({\n            key: 'the_key',\n            pluralKey: 'plural_key',\n            pluralCount: 'plural_count',\n            $0: 'a',\n            $1Binding: 'b',\n            $2: 'c'\n        });\n\n        assert.deepEqual(component.get('parameters').sort(), ['$0', '$1', '$2']);\n    });\n\n    ember_qunit.test('On initialization, extractParameterKeys() filters passed parameters to be bound', function (assert) {\n        var component = this.subject({\n            key: 'the_key',\n            pluralKey: 'plural_key',\n            pluralCount: 'plural_count',\n            $0: 'a',\n            $1Binding: 'b',\n            $2: 'c'\n        });\n\n        assert.deepEqual(component.get('observedParameters'), ['$1']);\n    });\n\n    ember_qunit.test('setTranslatedString() sets translatedString property with value from translateString()', function (assert) {\n        var component = this.subject();\n\n        component.translateString = function () {\n            return 'test value';\n        };\n\n        component.setTranslatedString();\n\n        assert.equal(component.get('translatedString'), 'test value');\n    });\n\n    ember_qunit.test('translateString() calls translateKey() on the translation service', function (assert) {\n        this.subject({\n            translateService: translateService,\n            key: 'the_key',\n            pluralKey: 'plural_key',\n            pluralCount: 'plural_count',\n            $0: 'a',\n            $1: 'b'\n        });\n\n        this.render();\n\n        assert.equal(translateService.get('key'), 'the_key');\n        assert.equal(translateService.get('pluralKey'), 'plural_key');\n        assert.equal(translateService.get('pluralCount'), 'plural_count');\n        assert.deepEqual(translateService.get('parameters'), { $0: 'a', $1: 'b' });\n    });\n\n    ember_qunit.test('willInsertElement event causes setTranslatedString() to be called', function (assert) {\n        var component = this.subject(),\n            setTranslatedStringWasCalled = false;\n\n        component.setTranslatedString = function () {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        this.render();\n\n        assert.equal(setTranslatedStringWasCalled, true);\n    });\n\n    ember_qunit.test('willInsertElement event causes observers to be added to each entry in observedParameters property', function (assert) {\n        var component = this.subject({\n            translateService: translateService,\n            key: 'the_key',\n            $0Binding: 'a',\n            $1: 'b'\n        }),\n            setTranslatedStringWasCalled = false;\n\n        component.setTranslatedString = function () {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        this.render();\n\n        // Change value so can monitor for change\n        setTranslatedStringWasCalled = false;\n\n        Ember['default'].run(function () {\n            component.set('$0', 'c');\n        });\n\n        assert.equal(setTranslatedStringWasCalled, true);\n    });\n\n    ember_qunit.test('willClearRender event causes observers to be removed', function (assert) {\n        var component = this.subject({\n            translateService: translateService,\n            key: 'the_key',\n            $0Binding: 'a',\n            $1: 'b'\n        }),\n            setTranslatedStringWasCalled = false;\n\n        component.setTranslatedString = function () {\n            setTranslatedStringWasCalled = true;\n        };\n\n        // Render in DOM to trigger willInsertElement event\n        this.render();\n\n        // Change value so can monitor for change\n        setTranslatedStringWasCalled = false;\n\n        component.trigger('willClearRender');\n\n        Ember['default'].run(function () {\n            component.set('$0', 'c');\n        });\n\n        assert.equal(setTranslatedStringWasCalled, false);\n    });\n\n});","define('dummy/tests/unit/components/sl-translate-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/sl-translate-test.js should pass jshint', function() { \n    ok(true, 'unit/components/sl-translate-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/initializers/translate-service-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/start-app'], function (Ember, ember_qunit, startApp) {\n\n    'use strict';\n\n    var App;\n\n    module('Unit - initializer:translate-service', {\n        beforeEach: function beforeEach() {\n            App = startApp['default']();\n        },\n\n        afterEach: function afterEach() {\n            Ember['default'].run(App, App.destroy);\n        }\n    });\n\n    ember_qunit.test('Registered on container as a singleton', function (assert) {\n        assert.equal(typeof App.__container__.lookup('translateService:main'), 'object', 'The translateService is an object');\n\n        assert.notEqual(App.registry._options['translateService:main'].instantiate, 'undefined', 'The service\\'s instantiate value is defined');\n\n        assert.equal(App.registry._options['translateService:main'].instantiate, false, 'The service is registered as a singleton');\n    });\n\n    ember_qunit.test('Injected on controllers', function (assert) {\n        assert.expect(1);\n\n        App.registry._typeInjections.controller.map(function (type) {\n            if (type.property === 'translateService') {\n                assert.ok(true, 'Service is available to controllers');\n            }\n        });\n    });\n\n    ember_qunit.test('Injected on views', function (assert) {\n        assert.expect(1);\n\n        App.registry._typeInjections.view.map(function (type) {\n            if (type.property === 'translateService') {\n                assert.ok(true, 'Service is available to views');\n            }\n        });\n    });\n\n    ember_qunit.test('Injected on components', function (assert) {\n        assert.expect(1);\n\n        App.registry._typeInjections.component.map(function (type) {\n            if (type.property === 'translateService') {\n                assert.ok(true, 'Service is available to components');\n            }\n        });\n    });\n\n});","define('dummy/tests/unit/initializers/translate-service-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/translate-service-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/translate-service-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/mixins/sl-get-translation-test', ['ember', 'sl-ember-translate/mixins/sl-get-translation'], function (Ember, mixinUnderTest) {\n\n    'use strict';\n\n    module('Unit - mixins:sl-get-translation');\n\n    test('Successfully mixed', function (assert) {\n        assert.expect(1);\n\n        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']),\n            subject = testObject.create();\n\n        assert.ok(subject);\n    });\n\n    test('Call to get() with a key not beginning with \"translate.\" is not intercepted', function (assert) {\n        assert.expect(1);\n\n        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {\n            testKey: 'testValue'\n        }),\n            subject = testObject.create();\n\n        assert.equal(subject.get('testKey'), 'testValue');\n    });\n\n    test('Call to get() with a key beginning with \"translate.\" calls this.translate()', function (assert) {\n        assert.expect(1);\n\n        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {\n            translate: function translate(value) {\n                return value;\n            }\n        }),\n            subject = testObject.create();\n\n        assert.equal(subject.get('translate.testingKey'), 'testingKey');\n    });\n\n    test('translate() returns call to this.translateService.getKeyValue()', function (assert) {\n        assert.expect(1);\n\n        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {\n            translateService: {\n                getKeyValue: function getKeyValue(value) {\n                    return value;\n                }\n            }\n        }),\n            subject = testObject.create();\n\n        assert.equal(subject.translate('called'), 'called');\n    });\n\n});","define('dummy/tests/unit/mixins/sl-get-translation-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/sl-get-translation-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/sl-get-translation-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/services/translate-test', ['ember', 'ember-qunit', 'sl-ember-translate/services/translate', 'dummy/tests/helpers/sl/synchronous'], function (Ember, ember_qunit, TranslateService, synchronous) {\n\n    'use strict';\n\n    var TS;\n\n    module('Unit - services:translate', {\n        beforeEach: function beforeEach() {\n            TS = TranslateService['default'].create();\n        }\n    });\n\n    ember_qunit.test('container property defaults to null', function (assert) {\n        assert.equal(TS.get('container'), null);\n    });\n\n    ember_qunit.test('dictionary property defaults to null', function (assert) {\n        assert.equal(TS.get('dictionary'), null);\n    });\n\n    ember_qunit.test('setDictionary() accepts only an object as a parameter', function (assert) {\n\n        // Empty parameter\n\n        var assertionThrown = false;\n\n        try {\n            TS.setDictionary();\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Parameter was empty');\n\n        // Number parameter\n\n        assertionThrown = false;\n\n        try {\n            TS.setDictionary(4);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Parameter was a Number');\n\n        // Array Parameter\n\n        assertionThrown = false;\n\n        try {\n            TS.setDictionary([]);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Parameter was an Array');\n\n        // Function\n\n        assertionThrown = false;\n\n        try {\n            TS.setDictionary(function () {});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Parameter was a Function');\n\n        // String Parameter\n\n        assertionThrown = false;\n\n        try {\n            TS.setDictionary('test');\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Parameter was a String');\n\n        // Boolean Parameter\n\n        assertionThrown = false;\n\n        try {\n            TS.setDictionary(false);\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(assertionThrown, 'Parameter was a Boolean');\n\n        // Object Parameter\n\n        assertionThrown = false;\n\n        try {\n            TS.setDictionary({});\n        } catch (error) {\n            assertionThrown = true;\n        }\n\n        assert.ok(!assertionThrown, 'Parameter was an Object');\n    });\n\n    ember_qunit.test('setDictionary() sets data on the dictionary property', function (assert) {\n        var testDictionary = Ember['default'].Object.create({ the_key: 'my value' });\n\n        TS.setDictionary(testDictionary);\n\n        assert.deepEqual(TS.get('dictionary'), testDictionary);\n    });\n\n    ember_qunit.test('getKeyValue() returns requested key if not found in dictionary', function (assert) {\n        TS.setDictionary(Ember['default'].Object.create({ the_key: 'my value' }));\n\n        assert.notEqual(TS.getKeyValue('wrong_key'), 'the_key');\n    });\n\n    ember_qunit.test('getKeyValue() returns requested key\\'s translated string', function (assert) {\n        TS.setDictionary(Ember['default'].Object.create({ the_key: 'my value' }));\n\n        assert.equal(TS.getKeyValue('the_key'), 'my value');\n    });\n\n    ember_qunit.test('translateKey() accepts only an object as a parameter', function (assert) {\n        var test = synchronous.requires(TS.translateKey, ['object']);\n\n        assert.ok(test.requires, test.messages);\n    });\n\n    ember_qunit.test('translateKey() returns translated string for specified key', function (assert) {\n        TS.setDictionary(Ember['default'].Object.create({ the_key: 'my value' }));\n\n        assert.equal(TS.getKeyValue('the_key'), 'my value');\n    });\n\n    ember_qunit.test('If either \"pluralKey\" or \"pluralCount\" are provided to translateKey() then both must be', function (assert) {\n        assert.equal(TS.translateKey({ key: 'singular_key', pluralKey: 'plural_key' }), 'singular_key');\n        assert.equal(TS.translateKey({ key: 'singular_key', pluralCount: 3 }), 'singular_key');\n    });\n\n    ember_qunit.test('Pluralization only works if \"pluralCount\" is a number', function (assert) {\n        TS.setDictionary(Ember['default'].Object.create({\n            the_singular_key: 'Singular translated value',\n            the_plural_key: 'Plural translated value'\n        }));\n\n        assert.notEqual(TS.translateKey({ key: 'the_singular_key', pluralKey: 'the_plural_key', pluralCount: 'two' }), 'Plural translated value');\n    });\n\n    ember_qunit.test('Pluralization occurs when provided the necessary information', function (assert) {\n        TS.setDictionary(Ember['default'].Object.create({\n            the_singular_key: 'Singular translated value',\n            the_plural_key: 'Plural translated value'\n        }));\n\n        assert.equal(TS.translateKey({ key: 'the_singular_key', pluralKey: 'the_plural_key', pluralCount: 0 }), 'Singular translated value');\n        assert.equal(TS.translateKey({ key: 'the_singular_key', pluralKey: 'the_plural_key', pluralCount: 3 }), 'Plural translated value');\n    });\n\n    ember_qunit.test('Token replacement in translation string', function (assert) {\n        TS.setDictionary(Ember['default'].Object.create({\n            the_key: 'Replaced values: {0} and {1}'\n        }));\n\n        assert.equal(TS.translateKey({\n            key: 'the_key',\n            parameters: {\n                $0: 'ASDF',\n                $1: 1234\n            }\n        }), 'Replaced values: ASDF and 1234');\n    });\n\n});","define('dummy/tests/unit/services/translate-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/services');\n  test('unit/services/translate-test.js should pass jshint', function() { \n    ok(true, 'unit/services/translate-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"sl-ember-translate\",\"version\":\"1.6.0.dfc0f915\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzplOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}